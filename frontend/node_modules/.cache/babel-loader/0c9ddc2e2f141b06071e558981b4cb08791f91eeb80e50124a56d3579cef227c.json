{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\omkar\\\\OneDrive\\\\Documents\\\\GitHub\\\\CollegePredictormain\\\\frontend\\\\src\\\\components\\\\Home\\\\Slider1.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './sliderStyles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Slider = ({\n  universities,\n  onRangeChange\n}) => {\n  _s();\n  const [maxRank, setMaxRank] = useState(100); // Set default max rank to 100\n  const [sliderValue, setSliderValue] = useState(100); // Set initial slider value to max rank\n\n  // Calculate max rank from the universities list\n  useEffect(() => {\n    if (universities.length > 0) {\n      const maxRanks = universities.map(college => Math.floor(college.maxRank));\n      const maxRank = Math.max(...maxRanks);\n      setMaxRank(maxRank);\n      setSliderValue(prev => prev > maxRank ? maxRank : prev); // Adjust slider if previous value exceeds max rank\n    }\n  }, [universities]);\n\n  // Handle slider value changes\n  const handleChange = event => {\n    const value = event.target.value;\n    setSliderValue(value);\n    onRangeChange([0, value]); // Update the range for filtering\n  };\n\n  // Tooltip positioning logic based on the slider value\n  const getTooltipStyle = () => {\n    const percent = maxRank > 0 ? sliderValue / maxRank * 100 : 0;\n    return {\n      left: `${percent}%`,\n      transform: `translateX(-${percent}%)`\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sliderBox\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slidecontainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"0\",\n        max: maxRank // Set dynamic max based on max rank\n        ,\n        className: \"slider\",\n        value: sliderValue,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rangeValues\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: maxRank\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tooltip\",\n        style: getTooltipStyle(),\n        children: sliderValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(Slider, \"7EqH3WqJ3hRVHc1F3Vofn3tEyS8=\");\n_c = Slider;\nexport default Slider;\nvar _c;\n$RefreshReg$(_c, \"Slider\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Slider","universities","onRangeChange","_s","maxRank","setMaxRank","sliderValue","setSliderValue","length","maxRanks","map","college","Math","floor","max","prev","handleChange","event","value","target","getTooltipStyle","percent","left","transform","className","children","type","min","onChange","fileName","_jsxFileName","lineNumber","columnNumber","style","_c","$RefreshReg$"],"sources":["C:/Users/omkar/OneDrive/Documents/GitHub/CollegePredictormain/frontend/src/components/Home/Slider1.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './sliderStyles.css'; \r\n\r\nconst Slider = ({ universities, onRangeChange }) => {\r\n  const [maxRank, setMaxRank] = useState(100); // Set default max rank to 100\r\n  const [sliderValue, setSliderValue] = useState(100); // Set initial slider value to max rank\r\n\r\n  // Calculate max rank from the universities list\r\n  useEffect(() => {\r\n    if (universities.length > 0) {\r\n      const maxRanks = universities.map((college) => Math.floor(college.maxRank));\r\n      const maxRank = Math.max(...maxRanks);\r\n      setMaxRank(maxRank);\r\n      setSliderValue((prev) => (prev > maxRank ? maxRank : prev)); // Adjust slider if previous value exceeds max rank\r\n    }\r\n  }, [universities]);\r\n\r\n  // Handle slider value changes\r\n  const handleChange = (event) => {\r\n    const value = event.target.value;\r\n    setSliderValue(value);\r\n    onRangeChange([0, value]); // Update the range for filtering\r\n  };\r\n\r\n  // Tooltip positioning logic based on the slider value\r\n  const getTooltipStyle = () => {\r\n    const percent = maxRank > 0 ? (sliderValue / maxRank) * 100 : 0;\r\n    return {\r\n      left: `${percent}%`,\r\n      transform: `translateX(-${percent}%)`,\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className=\"sliderBox\">\r\n      <div className=\"slidecontainer\">\r\n        {/* Range input */}\r\n        <input\r\n          type=\"range\"\r\n          min=\"0\"\r\n          max={maxRank} // Set dynamic max based on max rank\r\n          className=\"slider\"\r\n          value={sliderValue}\r\n          onChange={handleChange}\r\n        />\r\n\r\n        {/* Display range values (0 and max rank) */}\r\n        <div className=\"rangeValues\">\r\n          <span>0</span>\r\n          <span>{maxRank}</span>\r\n        </div>\r\n\r\n        {/* Tooltip showing current slider value */}\r\n        <div className=\"tooltip\" style={getTooltipStyle()}>\r\n          {sliderValue}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Slider;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}